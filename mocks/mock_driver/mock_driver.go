// Code generated by MockGen. DO NOT EDIT.
// Source: manager/allocator/network/driver/driver.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	plugingetter "github.com/docker/docker/pkg/plugingetter"
	driverapi "github.com/docker/libnetwork/driverapi"
	api "github.com/docker/swarmkit/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDrvRegistry is a mock of DrvRegistry interface
type MockDrvRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockDrvRegistryMockRecorder
}

// MockDrvRegistryMockRecorder is the mock recorder for MockDrvRegistry
type MockDrvRegistryMockRecorder struct {
	mock *MockDrvRegistry
}

// NewMockDrvRegistry creates a new mock instance
func NewMockDrvRegistry(ctrl *gomock.Controller) *MockDrvRegistry {
	mock := &MockDrvRegistry{ctrl: ctrl}
	mock.recorder = &MockDrvRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrvRegistry) EXPECT() *MockDrvRegistryMockRecorder {
	return m.recorder
}

// GetPluginGetter mocks base method
func (m *MockDrvRegistry) GetPluginGetter() plugingetter.PluginGetter {
	ret := m.ctrl.Call(m, "GetPluginGetter")
	ret0, _ := ret[0].(plugingetter.PluginGetter)
	return ret0
}

// GetPluginGetter indicates an expected call of GetPluginGetter
func (mr *MockDrvRegistryMockRecorder) GetPluginGetter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginGetter", reflect.TypeOf((*MockDrvRegistry)(nil).GetPluginGetter))
}

// Driver mocks base method
func (m *MockDrvRegistry) Driver(name string) (driverapi.Driver, *driverapi.Capability) {
	ret := m.ctrl.Call(m, "Driver", name)
	ret0, _ := ret[0].(driverapi.Driver)
	ret1, _ := ret[1].(*driverapi.Capability)
	return ret0, ret1
}

// Driver indicates an expected call of Driver
func (mr *MockDrvRegistryMockRecorder) Driver(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockDrvRegistry)(nil).Driver), name)
}

// MockAllocator is a mock of Allocator interface
type MockAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatorMockRecorder
}

// MockAllocatorMockRecorder is the mock recorder for MockAllocator
type MockAllocatorMockRecorder struct {
	mock *MockAllocator
}

// NewMockAllocator creates a new mock instance
func NewMockAllocator(ctrl *gomock.Controller) *MockAllocator {
	mock := &MockAllocator{ctrl: ctrl}
	mock.recorder = &MockAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAllocator) EXPECT() *MockAllocatorMockRecorder {
	return m.recorder
}

// Restore mocks base method
func (m *MockAllocator) Restore(arg0 []*api.Network) error {
	ret := m.ctrl.Call(m, "Restore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockAllocatorMockRecorder) Restore(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockAllocator)(nil).Restore), arg0)
}

// Allocate mocks base method
func (m *MockAllocator) Allocate(arg0 *api.Network) error {
	ret := m.ctrl.Call(m, "Allocate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocate indicates an expected call of Allocate
func (mr *MockAllocatorMockRecorder) Allocate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockAllocator)(nil).Allocate), arg0)
}

// Deallocate mocks base method
func (m *MockAllocator) Deallocate(arg0 *api.Network) error {
	ret := m.ctrl.Call(m, "Deallocate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deallocate indicates an expected call of Deallocate
func (mr *MockAllocatorMockRecorder) Deallocate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockAllocator)(nil).Deallocate), arg0)
}

// IsNetworkNodeLocal mocks base method
func (m *MockAllocator) IsNetworkNodeLocal(n *api.Network) (bool, error) {
	ret := m.ctrl.Call(m, "IsNetworkNodeLocal", n)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNetworkNodeLocal indicates an expected call of IsNetworkNodeLocal
func (mr *MockAllocatorMockRecorder) IsNetworkNodeLocal(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNetworkNodeLocal", reflect.TypeOf((*MockAllocator)(nil).IsNetworkNodeLocal), n)
}
