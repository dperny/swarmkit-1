// Code generated by MockGen. DO NOT EDIT.
// Source: manager/allocator/network/ipam/ipam.go

// Package mock_ipam is a generated GoMock package.
package mock_ipam

import (
	ipamapi "github.com/docker/libnetwork/ipamapi"
	api "github.com/docker/swarmkit/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDrvRegistry is a mock of DrvRegistry interface
type MockDrvRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockDrvRegistryMockRecorder
}

// MockDrvRegistryMockRecorder is the mock recorder for MockDrvRegistry
type MockDrvRegistryMockRecorder struct {
	mock *MockDrvRegistry
}

// NewMockDrvRegistry creates a new mock instance
func NewMockDrvRegistry(ctrl *gomock.Controller) *MockDrvRegistry {
	mock := &MockDrvRegistry{ctrl: ctrl}
	mock.recorder = &MockDrvRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrvRegistry) EXPECT() *MockDrvRegistryMockRecorder {
	return m.recorder
}

// IPAM mocks base method
func (m *MockDrvRegistry) IPAM(name string) (ipamapi.Ipam, *ipamapi.Capability) {
	ret := m.ctrl.Call(m, "IPAM", name)
	ret0, _ := ret[0].(ipamapi.Ipam)
	ret1, _ := ret[1].(*ipamapi.Capability)
	return ret0, ret1
}

// IPAM indicates an expected call of IPAM
func (mr *MockDrvRegistryMockRecorder) IPAM(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAM", reflect.TypeOf((*MockDrvRegistry)(nil).IPAM), name)
}

// MockAllocator is a mock of Allocator interface
type MockAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatorMockRecorder
}

// MockAllocatorMockRecorder is the mock recorder for MockAllocator
type MockAllocatorMockRecorder struct {
	mock *MockAllocator
}

// NewMockAllocator creates a new mock instance
func NewMockAllocator(ctrl *gomock.Controller) *MockAllocator {
	mock := &MockAllocator{ctrl: ctrl}
	mock.recorder = &MockAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAllocator) EXPECT() *MockAllocatorMockRecorder {
	return m.recorder
}

// Restore mocks base method
func (m *MockAllocator) Restore(arg0 []*api.Network, arg1 []*api.Endpoint, arg2 []*api.NetworkAttachment) error {
	ret := m.ctrl.Call(m, "Restore", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockAllocatorMockRecorder) Restore(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockAllocator)(nil).Restore), arg0, arg1, arg2)
}

// AllocateNetwork mocks base method
func (m *MockAllocator) AllocateNetwork(arg0 *api.Network) error {
	ret := m.ctrl.Call(m, "AllocateNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocateNetwork indicates an expected call of AllocateNetwork
func (mr *MockAllocatorMockRecorder) AllocateNetwork(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNetwork", reflect.TypeOf((*MockAllocator)(nil).AllocateNetwork), arg0)
}

// DeallocateNetwork mocks base method
func (m *MockAllocator) DeallocateNetwork(arg0 *api.Network) {
	m.ctrl.Call(m, "DeallocateNetwork", arg0)
}

// DeallocateNetwork indicates an expected call of DeallocateNetwork
func (mr *MockAllocatorMockRecorder) DeallocateNetwork(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateNetwork", reflect.TypeOf((*MockAllocator)(nil).DeallocateNetwork), arg0)
}

// AllocateVIPs mocks base method
func (m *MockAllocator) AllocateVIPs(arg0 *api.Endpoint, arg1 []string) error {
	ret := m.ctrl.Call(m, "AllocateVIPs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocateVIPs indicates an expected call of AllocateVIPs
func (mr *MockAllocatorMockRecorder) AllocateVIPs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateVIPs", reflect.TypeOf((*MockAllocator)(nil).AllocateVIPs), arg0, arg1)
}

// DeallocateVIPs mocks base method
func (m *MockAllocator) DeallocateVIPs(arg0 *api.Endpoint) {
	m.ctrl.Call(m, "DeallocateVIPs", arg0)
}

// DeallocateVIPs indicates an expected call of DeallocateVIPs
func (mr *MockAllocatorMockRecorder) DeallocateVIPs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateVIPs", reflect.TypeOf((*MockAllocator)(nil).DeallocateVIPs), arg0)
}

// AllocateAttachments mocks base method
func (m *MockAllocator) AllocateAttachments(arg0 []*api.NetworkAttachmentConfig) ([]*api.NetworkAttachment, error) {
	ret := m.ctrl.Call(m, "AllocateAttachments", arg0)
	ret0, _ := ret[0].([]*api.NetworkAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateAttachments indicates an expected call of AllocateAttachments
func (mr *MockAllocatorMockRecorder) AllocateAttachments(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateAttachments", reflect.TypeOf((*MockAllocator)(nil).AllocateAttachments), arg0)
}

// DeallocateAttachments mocks base method
func (m *MockAllocator) DeallocateAttachments(arg0 []*api.NetworkAttachment) {
	m.ctrl.Call(m, "DeallocateAttachments", arg0)
}

// DeallocateAttachments indicates an expected call of DeallocateAttachments
func (mr *MockAllocatorMockRecorder) DeallocateAttachments(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateAttachments", reflect.TypeOf((*MockAllocator)(nil).DeallocateAttachments), arg0)
}
